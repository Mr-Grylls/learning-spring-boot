Spring JdbcTemplate的常用方法：
	1、public int update（String sql,Object args[]）:该方法可以对数据表进行增加、修改、删除等操作
	2、public List<T> query(String sql,RowMapper<T> rowMapper,Object args[]):该方法可以对数据表进行查询操作

编程式事务管理：在代码中显示调用：beginTransaction、commit、rollback等与事务处理相关的方法
	1、基于底层API的编程式事务管理：根据PlatformTransactionManager、TransactionDefinition和TransactionStatus几个核心接口，通过编程的方式来进行事务处理
	2、基于TransactionTemplate的编程式事务管理

声明式事务管理：spring的声明式事务管理是通过aop技术实现的事务管理，其本质是对方法前后拦截，然后在目标方法开始创建或者加入一个事务，在执行完目标方法之后根据执行情况提交或回滚事务
	优点：不需要在业务逻辑代码中掺杂事务处理的代码，只需相关的事务规则声明便可以将事务规则应用到业务逻辑中，极大方便后期代码维护。
	spring的声明式事务管理可以通过两种方式实现：基于XML的方式、基于@Transactional注解的方式
声明式事务管理的处理流程：
	1、spring根据配置定义完成事务定义，设置事务属性
	2、执行开发者的代码逻辑
	3、如果开发者的代码产生异常并且满足事务回滚的配置条件，则事务回滚，否则事务提交
	4、释放资源

如何在事务处理中捕获异常：
	1、基于XML方式的声明式事务管理中捕获异常：<tx:method name="*" rollback-for="java.lang.Exception"/> 
	rollback-for属性指定回滚生效的异常类，多个异常类之间用逗号隔开：no-rollback-for属性指定回滚失效的异常类
	2、基于@Transactional注解的声明式事务管理中捕获异常：@Transactional(rollbackFor={Exception.class})
	